# ai_interior_design.py

import streamlit as st
# Removed torch, transformers, diffusers imports from global scope
from PIL import Image, ImageDraw, ImageFont
import io
import base64
# Keep numpy and cv2 as they are generally lighter and might be used elsewhere
import numpy as np
import cv2
import os
from datetime import datetime
import sys
import warnings

# Potlaƒçenie varovan√≠
warnings.filterwarnings('ignore')

# Konfigur√°cia str√°nky
st.set_page_config(
    page_title="AI Interior Design Generator",
    page_icon="üè†",
    layout="wide"
)

# Kontrola potrebn√Ωch kni≈æn√≠c
try:
    import timm
    import accelerate
except ImportError:
    st.error("""
    ‚ö†Ô∏è Ch√Ωbaj√∫ potrebn√© kni≈ænice. 
    
    Pre spr√°vne fungovanie aplik√°cie pros√≠m nain≈°talujte:
    ```
    pip install timm accelerate
    ```
    
    Po in≈°tal√°cii re≈°tartujte aplik√°ciu.
    """)
    st.stop()

# Inicializ√°cia modelov (cache na zr√Ωchlenie)
@st.cache_resource
def initialize_models():
    """Inicializuje potrebn√© AI modely"""
    # Import heavy libraries inside the function
    import torch
    from transformers import DetrImageProcessor, DetrForObjectDetection
    from diffusers import StableDiffusionImg2ImgPipeline, DPMSolverMultistepScheduler
    
    try:
        # Stable Diffusion pre generovanie n√°vrhov
        device = "cuda" if torch.cuda.is_available() else "cpu"
        torch_dtype = torch.float16 if torch.cuda.is_available() else torch.float32
        
        pipe = StableDiffusionImg2ImgPipeline.from_pretrained(
            "stabilityai/stable-diffusion-2-1",
            torch_dtype=torch_dtype,
            low_cpu_mem_usage=True,
            use_safetensors=True
        )
        
        # Optimaliz√°cia schedulera pre r√Ωchlej≈°ie generovanie
        pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)
        
        pipe = pipe.to(device)
        
        # Detekcia objektov pre anal√Ωzu miestnosti
        processor = DetrImageProcessor.from_pretrained("facebook/detr-resnet-50")
        model = DetrForObjectDetection.from_pretrained("facebook/detr-resnet-50").to(device)
        
        return pipe, processor, model, device
    except Exception as e:
        st.error(f"Chyba pri inicializ√°cii modelov: {str(e)}")
        st.stop()

def detect_room_objects(image, processor, model):
    """Detekuje objekty v miestnosti"""
    # Import torch inside the function
    import torch
    
    inputs = processor(images=image, return_tensors="pt")
    outputs = model(**inputs)
    
    # Spracovanie v√Ωstupov
    target_sizes = torch.tensor([image.size[::-1]])
    results = processor.post_process_object_detection(outputs, target_sizes=target_sizes, threshold=0.7)[0]
    
    detected_objects = []
    for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
        box = [round(i, 2) for i in box.tolist()]
        detected_objects.append({
            "object": model.config.id2label[label.item()],
            "confidence": round(score.item(), 3),
            "box": box
        })
    
    return detected_objects

def draw_boxes(image, objects):
    """Oznaƒç√≠ detekovan√© objekty na obr√°zku"""
    draw = ImageDraw.Draw(image)
    
    for obj in objects:
        box = obj["box"]
        label = f"{obj['object']} ({obj['confidence']:.2f})"
        
        # Nakreslenie obdƒ∫≈ænika
        draw.rectangle(box, outline="red", width=2)
        
        # Pridanie popisku
        draw.text((box[0], box[1] - 10), label, fill="red")
    
    return image

def generate_design(image, prompt, style, strength=0.75):
    """Generuje nov√Ω dizajn interi√©ru pomocou Stable Diffusion"""
    # Import torch inside the function
    import torch
    
    pipe, _, _, device = initialize_models()
    
    # Vytvorenie promptu
    full_prompt = f"interior design photo, {style} style, {prompt}, professional photography, high quality, 8k resolution, beautiful lighting"
    negative_prompt = "ugly, tiling, poorly drawn, deformed, blurry, low quality, watermark, text"
    
    # Konverzia obr√°zka pre model
    image = image.convert("RGB")
    image = image.resize((512, 512))  # Zmen≈°√≠me pre r√Ωchlej≈°ie generovanie
    
    # Generovanie nov√©ho dizajnu
    with torch.inference_mode():
        result = pipe(
            prompt=full_prompt,
            negative_prompt=negative_prompt,
            image=image,
            strength=strength,
            guidance_scale=7.5,
            num_inference_steps=30  # Zn√≠≈æen√Ω poƒçet krokov pre r√Ωchlej≈°ie generovanie
        ).images[0]
    
    return result

def suggest_furniture(style, room_type):
    """Navrhne n√°bytok pre dan√∫ miestnos≈• a ≈°t√Ωl"""
    furniture_suggestions = {
        "modern": {
            "living_room": [
                "Modul√°rna sedaƒçka v neutr√°lnych farb√°ch",
                "Minimalistick√Ω konferenƒçn√Ω stol√≠k so sklom",
                "LED stojacia lampa s dim√©rom",
                "Floating TV stojan",
                "Abstraktn√© umenie na stenu"
            ],
            "bedroom": [
                "Platform posteƒæ s ƒçal√∫nen√Ωm ƒçelom",
                "Z√°vesn√© noƒçn√© stol√≠ky",
                "Vstavan√° skri≈àa s posuvn√Ωmi dverami",
                "Minimalistick√° toaletka",
                "Smart osvetlenie s ovl√°dan√≠m cez aplik√°ciu"
            ],
            "kitchen": [
                "Vysokoleskl√° kuchynsk√° linka",
                "Ostrovƒçek s barovou ƒças≈•ou",
                "Integrovan√© spotrebiƒçe",
                "LED podsvietenie pracovnej plochy",
                "Dotykov√© bat√©rie"
            ]
        },
        "scandinavian": {
            "living_room": [
                "Svetl√° l√°tkov√° sedaƒçka",
                "Dreven√Ω konferenƒçn√Ω stol√≠k",
                "Hygge kresl√° s dekami",
                "Dreven√© police na stenu",
                "Pr√≠rodn√© rastliny v keramick√Ωch kvetin√°ƒçoch"
            ],
            "bedroom": [
                "Dreven√° posteƒæ s pr√≠rodn√Ωm vzhƒæadom",
                "Biele noƒçn√© stol√≠ky s dreven√Ωmi nohami",
                "Otvoren√Ω ≈°atn√≠k s dreven√Ωmi policami",
                "Pleten√© koberƒçeky",
                "Z√°vesn√© papierov√© lampy"
            ],
            "kitchen": [
                "Biele skrinky s dreven√Ωmi √∫chytkami",
                "Dreven√° pracovn√° doska",
                "Otvoren√© police z pr√≠rodn√©ho dreva",
                "Pastelov√© spotrebiƒçe",
                "Jednoduch√© z√°vesn√© svetl√°"
            ]
        },
        "industrial": {
            "living_room": [
                "Ko≈æen√° Chesterfield sedaƒçka",
                "Kovov√Ω konferenƒçn√Ω stol√≠k na kolieskach",
                "Oceƒæov√© reg√°ly",
                "Vintage priemyseln√© svietidl√°",
                "Tehlov√° stena (prav√° alebo tapeta)"
            ],
            "bedroom": [
                "Kovov√° posteƒæ s ƒçiernym r√°mom",
                "Noƒçn√© stol√≠ky z oceƒæov√Ωch p√≠p",
                "Otvoren√Ω kovov√Ω ≈°atn√≠k",
                "Edison ≈æiarovky",
                "Hrub√Ω vlnen√Ω koberec"
            ],
            "kitchen": [
                "Nerezov√© pracovn√© plochy",
                "Otvoren√© kovov√© police",
                "Priemyseln√© z√°vesn√© svetl√°",
                "ƒåierne matn√© skrinky",
                "Kovov√© barov√© stoliƒçky"
            ]
        }
    }
    
    return furniture_suggestions.get(style, {}).get(room_type, ["Moment√°lne nem√°me n√°vrhy pre t√∫to kombin√°ciu"])

# Kontrola potrebn√Ωch kni≈æn√≠c
try:
    import timm
except ImportError:
    st.error("""
    ‚ö†Ô∏è Kni≈ænica 'timm' nie je nain≈°talovan√°. 
    
    Pre spr√°vne fungovanie aplik√°cie pros√≠m nain≈°talujte:
    ```
    pip install timm
    ```
    
    Po in≈°tal√°cii re≈°tartujte aplik√°ciu.
    """)
    st.stop()

# Hlavn√© rozhranie
st.title("üè† AI Interior Design Generator")
st.write("Transformujte va≈°u miestnos≈• pomocou AI - jednoducho nahrajte fotku a vyberte ≈°t√Ωl!")

# Boƒçn√Ω panel s nastaveniami
with st.sidebar:
    st.header("‚öôÔ∏è Nastavenia")
    
    style = st.selectbox(
        "Vyberte ≈°t√Ωl dizajnu",
        ["modern", "scandinavian", "industrial", "minimalist", "bohemian", "traditional", "luxury", "rustic"],
        index=0
    )
    
    room_type = st.selectbox(
        "Typ miestnosti",
        ["living_room", "bedroom", "kitchen", "bathroom", "office", "dining_room"],
        index=0
    )
    
    strength = st.slider(
        "Intenzita zmeny (0.0 = ≈æiadna zmena, 1.0 = √∫pln√° zmena)",
        min_value=0.0,
        max_value=1.0,
        value=0.75,
        step=0.05
    )
    
    custom_prompt = st.text_area(
        "Vlastn√Ω popis (voliteƒæn√©)",
        placeholder="Napr.: pridaj veƒæk√© okn√°, viac pr√≠rodn√©ho svetla, zelen√© rastliny...",
        height=100
    )
    
    st.markdown("---")
    st.info("""
    **Tipy pre najlep≈°ie v√Ωsledky:**
    - Pou≈æite fotky v dobrom osvetlen√≠
    - Sna≈æte sa zachyti≈• cel√∫ miestnos≈•
    - Vyƒçistite priestor od nepotrebn√Ωch predmetov
    - Uistite sa, ≈æe fotka nie je rozmazan√°
    """)

# Hlavn√Ω obsah
col1, col2 = st.columns(2)

with col1:
    st.subheader("üì∏ Origin√°lna fotka")
    uploaded_file = st.file_uploader("Nahrajte fotku va≈°ej miestnosti", type=["jpg", "jpeg", "png"])
    
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, use_container_width=True)
        
        # Anal√Ωza miestnosti
        if st.button("üîç Analyzova≈• miestnos≈•"):
            with st.spinner("Analyzujem objekty v miestnosti..."):
                _, processor, model, device = initialize_models()
                objects = detect_room_objects(image, processor, model)
                
                # Zobrazenie detekovan√Ωch objektov
                image_with_boxes = draw_boxes(image.copy(), objects)
                st.image(image_with_boxes, use_container_width=True)
                
                st.write("### Detekovan√© objekty:")
                for obj in objects:
                    st.write(f"- {obj['object']} (konfidencia: {obj['confidence']:.2f})")

with col2:
    st.subheader("‚ú® Nov√Ω dizajn")
    
    if uploaded_file is not None:
        if st.button("üé® Generova≈• nov√Ω dizajn"):
            with st.spinner("Generujem nov√Ω dizajn... (m√¥≈æe to trva≈• 1-2 min√∫ty)"):
                try:
                    generated_image = generate_design(image, custom_prompt, style, strength)
                    st.image(generated_image, use_container_width=True)
                    
                    # Mo≈ænos≈• stiahnu≈• v√Ωsledok
                    buf = io.BytesIO()
                    generated_image.save(buf, format="PNG")
                    byte_img = buf.getvalue()
                    
                    st.download_button(
                        label="üíæ Stiahnu≈• dizajn",
                        data=byte_img,
                        file_name=f"interior_design_{style}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png",
                        mime="image/png"
                    )
                    
                except Exception as e:
                    st.error(f"Chyba pri generovan√≠: {str(e)}")
    else:
        st.info("üëà Najprv nahrajte fotku miestnosti")

# N√°vrhy n√°bytku
if uploaded_file is not None:
    st.markdown("---")
    st.subheader("üõãÔ∏è Odpor√∫ƒçan√Ω n√°bytok")
    
    suggestions = suggest_furniture(style, room_type)
    
    cols = st.columns(3)
    for i, item in enumerate(suggestions):
        with cols[i % 3]:
            st.markdown(f"- {item}")

# Gal√©ria pr√≠kladov (vylep≈°en√©)
st.markdown("---")
st.subheader("üñºÔ∏è Pr√≠klady transform√°ci√≠")

example_cols = st.columns(3)
examples = [
    {
        "before": "living_room_before.jpg",
        "after": "living_room_after.jpg",
        "style": "Modern",
        "description": "Transform√°cia ob√Ωvaƒçky na modern√Ω minimalistick√Ω priestor"
    },
    {
        "before": "bedroom_before.jpg",
        "after": "bedroom_after.jpg",
        "style": "Scandinavian",
        "description": "Premena sp√°lne na √∫tuln√Ω ≈°kandin√°vsky ≈°t√Ωl"
    },
    {
        "before": "kitchen_before.jpg",
        "after": "kitchen_after.jpg",
        "style": "Industrial",
        "description": "Kuchy≈àa v industri√°lnom ≈°t√Ωle"
    }
]

for i, example in enumerate(examples):
    with example_cols[i]:
        st.markdown(f"**{example['style']}**")
        st.caption(example['description'])
        # Tu by ste mohli prida≈• skutoƒçn√© pr√≠klady obr√°zkov
        st.image("https://via.placeholder.com/300x200.png?text=Pred", caption="Pred")
        st.image("https://via.placeholder.com/300x200.png?text=Po", caption="Po")

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center'>
    <p>Vytvoren√© s ‚ù§Ô∏è pomocou Streamlit a Stable Diffusion</p>
    <p>Pre najlep≈°ie v√Ωsledky odpor√∫ƒçame GPU s min. 8GB VRAM</p>
</div>
""", unsafe_allow_html=True)

# Po≈æiadavky pre spustenie (s√∫ƒças≈• dokument√°cie)
"""
Po≈æiadavky na in≈°tal√°ciu:
1. Vytvorte virtu√°lne prostredie:
   python -m venv venv
   source venv/bin/activate  # Linux/Mac
   venv\\Scripts\\activate  # Windows

2. Nain≈°talujte po≈æadovan√© kni≈ænice:
   pip install streamlit torch torchvision transformers diffusers pillow opencv-python numpy timm accelerate

3. Spustite aplik√°ciu:
   streamlit run ai_interior_design.py

4. Otvorte webov√∫ str√°nku v prehliadaƒçi (zvyƒçajne http://localhost:8501)

Pozn√°mka: Pre pln√∫ funkcionalitu je potrebn√° GPU s podporou CUDA.
Pre modely bez GPU m√¥≈æete pou≈æi≈• ni≈æ≈°iu kvalitu alebo men≈°ie modely.

Ak m√°te probl√©my so spusten√≠m, sk√∫ste:
- pip install --upgrade streamlit
- pip install --upgrade torch torchvision
- pip install --upgrade transformers diffusers
"""
